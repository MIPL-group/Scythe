## This is the bicycle-log parser which also parses log with backward filter inference 

import os
import math
from tabulate import tabulate

path = "."

log = []

# parsing all log files
for fn in os.listdir("."):
  if fn.endswith(".log"):
    f = open(fn, 'r')
    content = f.readlines()
    i = 0
    log_entry = {}
    log_entry["log_name"] = f.name
    log_entry["finished"] = False
    log_entry["fail_to_find"] = False
    log_entry["last_table_number"] = "-"
    log_entry["avg_table_size"] = "-"
    log_entry["symtbl_count"] = []

    sym_table_cnt = 0
    synFilter_bitFilter_ratio = 0
    sum_row = 0
    sum_col = 0
    sum_red_rate = 0


    while i < len(content):
        line = content[i]
        # extract the running time
        if line.startswith("[[Synthesizer finished]] time:"):
            time = line[len("[[Synthesizer finished]] time:") + 1:line.rindex(":")]
            log_entry["time"] = time
        # extract final table information
        elif (line.startswith("[Enumeration Finished")):
            log_entry["finished"] = True
            if "Does not find a query" in line:
                log_entry["fail_to_find"] = True
        elif (line.startswith("Runner ups: ")):
            runner_up_table = line[len("Runner ups: "):].strip()
            log_entry["runner_up"] = runner_up_table
        # extract symbolic table number at each stage
        elif (line.startswith("[Basic]: ")):
            symtbl_number = int(line[line.rindex(":")+2:].strip())
            log_entry["symtbl_count"].append(symtbl_number)
        elif (line.startswith("[Aggregation]: ")):
            symtbl_number = int(line[line.rindex(":")+2:].strip())
            log_entry["symtbl_count"].append(symtbl_number)
        elif (line.startswith("[EnumJoin]")):
            symtbl_number = int(line[line.rindex(":")+2:].strip())
            log_entry["symtbl_count"].append(symtbl_number)
        elif (line.startswith("[avg reduction rate: syn filter / bit vector]")):
            concrete_to_bitvec_reduction = line[line.rindex("]") + 1:].strip()
        elif (line.startswith("[avg reduction rate: compound filter / bit vector]")):
            compound_to_bitvec_reduction = line[line.rindex("]") + 1:].strip()
        elif (line.startswith("[max compound filter count]")):
            max_compound_filter_count = line[line.rindex("]") +1:].strip()
        elif (line.startswith("[avg last stage compound filter count] ")):
            avg_last_stage_cfilter_count = line[line.rindex("]") + 1:].strip()
        elif (line.startswith("[max back inferred filter count]")):
            max_back_inferred_filter_count = line[line.rindex("]") + 1:].strip()
        elif (line.startswith("[avg reduction visited compound filters rate (as using back inference)]")):
            avg_cfilter_visited_reduction = line[line.rindex("]") + 1:].strip()
        elif (line.startswith("[avg back inferred filter bogus rate]")):
            avg_back_inferred_filter_bogus_rate = line[line.rindex("]") + 1:].strip()
        i += 1

    log_entry["avg_syn_bit_filter_ratio"] = concrete_to_bitvec_reduction[:5]
    log_entry["avg_reduction_rate"] = compound_to_bitvec_reduction[:5]
    log_entry["max_compound_filter_count"] = max_compound_filter_count

    log_entry["max_back_inferred_filter_count"] = max_back_inferred_filter_count
    log_entry["avg_cfilter_visited_reduction"] = avg_cfilter_visited_reduction[:5]
    log_entry["avg_back_inferred_filter_bogus"] = avg_back_inferred_filter_bogus_rate[:5]

    concrete_to_bitvec_reduction = "--------"
    compound_to_bitvec_reduction = "--------"
    max_compound_filter_count = "---"
    max_back_inferred_filter_count = "---"
    avg_cfilter_visited_reduction = "---"
    avg_back_inferred_filter_bogus_rate = "---"

    while (len(log_entry["symtbl_count"]) < 4):
        log_entry["symtbl_count"].append(-1)

    log.append(log_entry)

print "[q1/q2/q3/q4 indicates how many symbolic tables are built in each enumeration stage.]"
print "[concrete/bitvec is the reduction rate between the number of different primitive \n\t filters syntax forms and the number of bitvectors generated by these filters.]"
print "(Prmitive filters are filters without conjunction,)"
print "[compound/bitvec is the reduction rate between the number of different combinations \n\tof compound filters and the number of their bitvec representation.]"
print "(These compound filters are filters in a compound symbolic table, the combination is created by:\n\t taking 1 from the left sub-table, 1 from the right sub-table, and 1 form the canonical filters for this table, \n\teach of these three filters can be conjunction filters at most length 2.)"

table_header = ["id", "status", "time", "runner up", "q1", "q2", "q3", "q4", "concrete/bitvec", "compound/bitvec", "max_compound_to_visit","max_back_inferred_filter_count", "visited_cfilter_reduction_rate" ,"inferred_bogus_rate"]
tabular_log = []
for log_item in log:
    row = []
    row.append(log_item["log_name"])

    if log_item["finished"]:
        if (log_item["fail_to_find"]):
            row.append("fail to find")
            if ("time" in log_item):
                row.append(log_item["time"])
            else:
                row.append("---")
            row.append("0")
        else:
            row.append("succeed")
            if ("time" in log_item):
                row.append(log_item["time"])
            else:
                row.append("---")
            row.append(log_item["runner_up"])
    else:
        row.append("memory exceed")
        row.append("---")
        row.append("---")
    row.append(log_item["symtbl_count"][0])
    row.append(log_item["symtbl_count"][1])
    row.append(log_item["symtbl_count"][2])
    row.append(log_item["symtbl_count"][3])

    row.append(log_item["avg_syn_bit_filter_ratio"])
    row.append(log_item["avg_reduction_rate"])
    row.append(log_item["max_compound_filter_count"])

    row.append(log_item["max_back_inferred_filter_count"])
    row.append(log_item["avg_cfilter_visited_reduction"])
    row.append(log_item["avg_back_inferred_filter_bogus"])
    tabular_log.append(row)

print tabulate(tabular_log, table_header)

'''
x = ""
for s in table_header:
    x = x + s + ", "
print x[:-2]
for l in tabular_log:
    x = ""
    for s in l:
        x = x + str(s) + ", "
    print x[:-2]
'''
